#Prompt para controllertest

"Por favor, genera una clase de prueba en Java utilizando JUnit y Mockito para probar un controlador llamado ClienteController. Este controlador utiliza un servicio ClienteService y expone métodos CRUD para gestionar clientes.

Los métodos del controlador son:

getCliente(): Devuelve una lista de todos los clientes.
getClienteById(int id): Devuelve un cliente por su ID.
addCliente(ClienteDTO cliente): Agrega un nuevo cliente.
deleteCliente(int id): Elimina un cliente por su ID.
updateCliente(int id, ClienteDTO cliente): Actualiza un cliente existente.
La clase de prueba debe:

Usar anotaciones como @Mock, @InjectMocks y @BeforeEach para configurar Mockito.
Verificar las respuestas HTTP y el comportamiento del controlador con métodos como assertEquals.
Simular el comportamiento del servicio ClienteService usando when y verify.
Incluye pruebas para los casos exitosos de cada método y usa MockitoAnnotations.openMocks para inicializar los mocks. Asegúrate de que la prueba sea completa y bien estructurada."


#Prompt para servicetest

"Por favor, genera una clase de prueba en Java usando JUnit y Mockito para probar el servicio ClienteService. Este servicio maneja las operaciones CRUD relacionadas con la entidad Cliente.

Especificaciones:

El servicio depende de un repositorio ClienteRepository y usa ModelMapper para convertir entre los modelos de datos (ClienteModel) y los DTOs (ClienteDTO).
Los métodos que deben probarse son:
getAllClientes(): Devuelve una lista de todos los clientes.
getClienteById(int id): Devuelve un cliente por su ID (envuelto en un Optional).
saveCliente(ClienteDTO cliente): Agrega un nuevo cliente.
deleteCliente(int id): Elimina un cliente por su ID.
updateCliente(ClienteDTO cliente): Actualiza un cliente existente.
Requisitos de la prueba:

Usa anotaciones como @Mock, @InjectMocks, @BeforeEach y @ExtendWith (con SpringExtension) para configurar los mocks.
Mockea el comportamiento del repositorio con métodos como when y verifica interacciones con verify.
Verifica los resultados con assertEquals y assertTrue.
Inicializa los mocks con MockitoAnnotations.openMocks y crea un objeto ClienteService en setUp() inyectando las dependencias necesarias.
Asegúrate de manejar correctamente los casos de prueba para que cubran tanto la lógica principal como el flujo de datos.
Incluye un ejemplo de prueba que simule datos del repositorio y valide el comportamiento del servicio con datos de ejemplo."